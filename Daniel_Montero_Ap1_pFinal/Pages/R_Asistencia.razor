@page "/R_Asistencia"
@page "/R_Asistencia/{ID:int}" 
@inject IToastService toast 

<EditForm Model="asistencia" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div className="container">
         <div class="card align-items-center">
            <div class="card">


                <div class="card-header">
                    <h3>Registro de Asistencia</h3>
                </div>


                <div class="card-body">
                    <form>

                        @*Asistencia id*@

                        <div class="form-row align-items-center">

                            <div class="col">

                                <div class="form-group">

                                    <label>AsistenciaID</label>

                                    <div class="input-group">

                                        <InputNumber @bind-Value="asistencia.AsistenciaId" class="form-control col-4" />

                                        <div>

                                            <button type="button" class="btn btn-primary input-group-text"
                                                @onclick="Buscar">Buscar</button>

                                        </div>

                                    </div>

                                </div>

                            </div>

                        </div>


                        @* Grupo *@
                        <div class="form-group">
                            <label>Grupo</label>
                           <InputSelect class="form-select text-14" @bind-Value="asistencia.GrupoId">
                                    <option value="null"> </option>
                                        @foreach (var item in Listagrupo)
                                        {
                                            
                                            <option value="@item.GrupoId">@item.DescripcionCurso</option>
                            
                                        }
                            </InputSelect>
                             <ValidationMessage For="@(() =>asistencia.GrupoId)" />
                        </div>
                       
                         <label>  </label>
                       
                    
                    
                        @* Fecha *@
                         <label>  </label>
                        <div Class="form-group">

                            <label>Fecha</label>


                            <div class="input-group">

                                <span class="input-group-text">Fecha</span>
                                <input type="date" @bind-value="asistencia.Fecha" />
                            </div>
                            <ValidationMessage For="@(() => asistencia.Fecha)" />

                        </div>

                    </form>


                </div>


                <div class="card-header align-items-center">
                    <h3>Asistencia Detalle </h3>
                </div>

                <div class="card-body">

                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">


                                <div class="input-group">
                                
                                   
                                    <div class="flex-fill mx-2">
                                        <label>Estudiante</label>
                                       
                               
                                        <InputSelect class="form-select text-14" @bind-Value="Detalle.EstudianteId">
                                              
                                                @foreach (var item in Listaestudiante)
                                                {
                                                    
                                                    <option value="@item.EstudianteId">@item.Nombre</option>
                                    
                                                }
                                        </InputSelect>
                                         <ValidationMessage For="@(() =>Detalle.EstudianteId)" />
                                    </div>
                                        
                                    <div class="flex-fill mx-3">
                                        <label>Asistio</label>
                                        <InputRadioGroup class="from-control" @bind-Value="Filtro" >
                                         <label>Si</label> 
                                        <InputRadio class="form-check-input" type="radio" Value="1"/>
                                        <label>No</label>
                                        <InputRadio class="form-check-input" type="radio" Value="2"/>
                                        </InputRadioGroup>
                                        <ValidationMessage For="@(() => Detalle.Asistio)" />
                                    </div>
                                    

                                    <button type="button" class="btn btn-lg btn-primary"
                                        @onclick="Agregardetalle">Agregar</button>
                                </div> 
                            </div>
                        </div>
                    </div>


                    <table class="table table-light">
                        <thead class="thead">
                            <tr class="table">
                                <th>EstudianteId</th>
                                <th>Asistio</th>
                                <th>Nombre</th>
                            </tr>
                        </thead>

                         <tbody>
                            @foreach (var item in asistencia.asistenciadetalle)
                            {
                                <tr>
                                    <td>@item.EstudianteId</td>
                                    <td>@item.Asistio</td>
                                    <td>@item.Nombre</td>
                                    <td><span class="btn btn-sm btn-outline-primary oi oi-ban" href="#"
                                        @onclick="@(() => RemoverFila(item))"> Remover</span> </td>
                                </tr>
                            }
                        </tbody> 

                    </table>
                     <div class="form-group">
                           <div class="form-group text-center" display: inline-block>
                                <label>Presente</label>
                                <InputNumber readonly class="lg " @bind-Value="asistencia.Presente" />
                                <label>Ausente</label>
                                <InputNumber readonly class="lg " @bind-Value="asistencia.Ausente" />
                            </div>
                    </div>  
                    <label >

                    </label>
               
                    <div class="card-footer">

                        <div class="form-group text-center" display: inline-block>

                            <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>

                            <button type="submit" class="btn btn-lg btn-success">Guardar</button>

                            <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    
    [Parameter]
    public int ID  { get; set; }
    public Asistencia asistencia {set;get;}= new Asistencia();
    public AsistenciaDetalle Detalle =new AsistenciaDetalle(0,0,false,"",0,0);
    public Estudiantes estudiantes= new Estudiantes();
    public List<Estudiantes> Listaestudiante = new List<Estudiantes>();
  
    public Grupos grupos= new Grupos();
    public int cantidad { get; set; }
    public int cantidadsss { get; set; }
    
    public int Filtro { get; set; }
    public List<Grupos> Listagrupo = new  List<Grupos>();

    public List<Asistencia> lista { get; set; } = new List<Asistencia>();
     [Inject]
    public AsistenciaBLL asistenciaBLL { get; set; }
    [Inject]
    public TodoBLLModelCreating todoBLLModelCreating{ get; set; }
    
    protected override void OnInitialized()
    {
          asistencia.AsistenciaId=ID;
          lista=asistenciaBLL.GetList(c => true);
          Listaestudiante= asistenciaBLL.GetListEstudiante(c => true);
          Listagrupo= asistenciaBLL.GetListGrupos(c => true);
        Buscar();
        

    }

    private void RemoverFila(AsistenciaDetalle  item)
    {
        
      cantidad=1;
        if(item.Asistio==true)
       {
             asistencia.Presente-=1;
             this.asistencia.asistenciadetalle.Remove(item);
           
       }else{
           
          asistencia.Ausente-=1;
         this.asistencia.asistenciadetalle.Remove(item);
           
       }
      

    }

    public void Buscar()
    {
      if (this.asistencia.AsistenciaId> 0)
        {
            Asistencia? encontrado =asistenciaBLL.Buscar(this.asistencia.AsistenciaId);
        
            if (encontrado != null)
            {
            this.asistencia= encontrado;
            }
            else
            {
                 toast.ShowError("No se encontro ");
            }
        }
    }
    public void Nuevo()
    {
        asistencia= new Asistencia();
        Detalle= new AsistenciaDetalle(0,0,false,"",0,0);
        
    }
    public void Guardar()
    {    
         Estudiantes? encontrado =todoBLLModelCreating.Buscar(this.Detalle.EstudianteId);
            
        if(encontrado != null){
              this.estudiantes=encontrado;
             
                   
                 lista=asistenciaBLL.GetList(c => true);
                   todoBLLModelCreating.Modificarpararestar(estudiantes,asistencia);
        }
        
            if(asistenciaBLL.insertar(asistencia))
            {
                
               toast.ShowSuccess("Se ha guardado correctamente");
       
                Nuevo();
             
            }else{
                    
                toast.ShowError("No se ha Guardado");
            }
        
    }
     public void eliminadoDetalle()
    {   
        Asistencia? encontrados =asistenciaBLL.Buscar(this.asistencia.AsistenciaId);
        
            if (encontrados != null)
            
            this.asistencia= encontrados;
             Estudiantes? encontrado =todoBLLModelCreating.Buscar(this.asistencia.AsistenciaId);
            
        if(encontrado != null)
              this.estudiantes=encontrado;
            todoBLLModelCreating.Modificarparaeliminar(estudiantes,asistencia);
    }
    
  
    public void Eliminar()
    {  
        
 
        if (asistenciaBLL.Eliminar(asistencia.AsistenciaId))
        {
            eliminadoDetalle();
            Nuevo();
            toast.ShowSuccess("Se ha eliminado con exito"); 
         

        }
        else
        {
           
              toast.ShowError("No se pudo eliminar con exito");
        }
    }
    
    public void Agregardetalle()
    {
       
        cantidad=0;
     
         Estudiantes? encontrado =todoBLLModelCreating.Buscar(this.Detalle.EstudianteId);
          
            if(encontrado != null)
         
                if(Filtro==1){
                Detalle.Asistio=true;
                }else
                if(Filtro==2)
                {
                Detalle.Asistio=false;
                }


                    if(Filtro==1 && Detalle.EstudianteId>=1  || Filtro==2 && Detalle.EstudianteId>=1 ){
                        var encontrados =asistenciaBLL.VerificarEstudianteRepetido(asistencia,Detalle);
                           if(!encontrados){
                                if(Detalle.Asistio==true)
                                {
                                    cantidad=1;
                                    
                                    asistencia.Presente+=cantidad++;
                                    
                                    
                                }else{
                                    cantidad=1;
                                    asistencia.Ausente+=cantidad++;
                                
                                
                                    
                                }
                                
                                
                                    
                                asistencia.asistenciadetalle.Add(new AsistenciaDetalle (asistencia.AsistenciaId,Detalle.EstudianteId,Detalle.Asistio,Detalle.Nombre=encontrado.Nombre,Detalle.Presente,Detalle.Ausente));
                                lista =asistenciaBLL.GetList(c => true); 
                            }else{
                    

                    toast.ShowError("ya se ha agregado ese estudiante"); 
                               }
                
                }else{
                    

                    toast.ShowError("Tiene que colocar si o no y un estudiante"); 
                }
           
       
    }
   
    
}



